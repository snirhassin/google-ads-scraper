// Note: This is a placeholder for the XLSX library
// In production, you would include the actual XLSX library from:
// https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js

// For now, we'll use a simple implementation for the demo
window.XLSX = {
  utils: {
    book_new: () => ({ SheetNames: [], Sheets: {} }),
    aoa_to_sheet: (data) => {
      const ws = {};
      const range = { s: { c: 0, r: 0 }, e: { c: data[0].length - 1, r: data.length - 1 } };
      
      for (let R = 0; R < data.length; R++) {
        for (let C = 0; C < data[R].length; C++) {
          const cell_address = { c: C, r: R };
          const cell_ref = XLSX.utils.encode_cell(cell_address);
          ws[cell_ref] = { v: data[R][C], t: 's' };
        }
      }
      
      ws['!ref'] = XLSX.utils.encode_range(range);
      return ws;
    },
    book_append_sheet: (wb, ws, name) => {
      wb.SheetNames.push(name);
      wb.Sheets[name] = ws;
    },
    encode_cell: ({ c, r }) => {
      return String.fromCharCode(65 + c) + (r + 1);
    },
    encode_range: (range) => {
      return XLSX.utils.encode_cell(range.s) + ':' + XLSX.utils.encode_cell(range.e);
    }
  },
  write: (wb, opts) => {
    // This is a simplified version - in production use the real XLSX library
    const csv = wb.SheetNames.map(name => {
      const ws = wb.Sheets[name];
      const data = [];
      const range = XLSX.utils.decode_range(ws['!ref']);
      
      for (let R = range.s.r; R <= range.e.r; R++) {
        const row = [];
        for (let C = range.s.c; C <= range.e.c; C++) {
          const cell_address = { c: C, r: R };
          const cell_ref = XLSX.utils.encode_cell(cell_address);
          const cell = ws[cell_ref];
          row.push(cell ? cell.v : '');
        }
        data.push(row.join(','));
      }
      return data.join('\n');
    }).join('\n');
    
    return new TextEncoder().encode(csv);
  },
  decode_range: (range_str) => {
    const parts = range_str.split(':');
    return {
      s: XLSX.utils.decode_cell(parts[0]),
      e: XLSX.utils.decode_cell(parts[1])
    };
  },
  decode_cell: (cell_str) => {
    const match = cell_str.match(/([A-Z]+)(\d+)/);
    return {
      c: match[1].charCodeAt(0) - 65,
      r: parseInt(match[2]) - 1
    };
  }
};

console.log('XLSX library loaded (simplified version)');